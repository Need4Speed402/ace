test {
	name 'nothing'
	case {
		void
	}
	expect ''
}

test {
	name 'simple print'
	case {
		[console] hello
	}
	expect "
		hello
		
	`"
}

test {
	name 'effects in print message'
	case {
		[console] ([console] hello)
	}
	expect "
		hello
		hello
		
	`"
}

test {
	name 'print twice'
	case {
		[root Function] message {
			[console] message
			([console] message)
		} hello
	}
	expect "
		hello
		hello
		
	`"
}

test {
	name 'print inside function'
	case {
		[root Function] void {
			[console] hello
		} whatever
	}
	expect "
		hello
		
	`"
}

test {
	name 'function alias'
	case {
		[root Function] print {
			(print hello) (print world)
		} ([root Function] message {
			[console] message
		})
	}
	expect "
		hello
		world
		
	`"
}

test {
	name 'environment alias'
	case {
		{
			hello
		} [console]
	}
	expect "
		hello
		
	`"
}

test {
	name 'environment alias multiple'
	case {
		{
			hello world
		} [console]
	}
	expect "
		hello
		world
		
	`"
}

test {
	name 'calling function that was passed to console'
	case {
		([console] ([root Function] void {[console] hello})) void
	}
	expect "
		0
		hello
		
	`"
}

test {
	name 'calling function that was passed to console with indirection'
	case {
		([console] ([root Function] message {[console] message})) hello
	}
	expect "
		0
		hello
		
	`"
}

test {
	name 'effects in function name'
	case {
		[root Function] ([console] hello)
	}
	expect "
		hello
		
	`"
}

test {
	name 'effects in void paramater'
	case {
		[root Function] void {whatever} ([console] hello)
	}
	expect "
		hello
		
	`"
}

test {
	name 'effects in environment'
	case {
		{void} ([root Function] void {[console] hello})
	}
	expect "
		hello
		
	`"
}

test {
	name 'immutable effects in environment call'
	case {
		{void void void} ([root Function] void {[console] hello})
	}
	expect "
		hello
		hello
		hello
		
	`"
}

test {
	name 'multiple effects used multiple times'
	case {
		([root Function] do {
			(do void)
			(do void)
			(do void)
			(do void)
		}) ([root Function] void {
			[root ``] ([console] hello) ([console] world)
		})
	}
	expect "
		hello
		world
		hello
		world
		hello
		world
		hello
		world
		
	`"
}

test {
	name 'immutable effect, dependent effect in environment combination'
	case {
		{one two three} ([root Function] msg {[root ``] ([console] hello) ([console] msg)})
	}
	expect "
		hello
		one
		hello
		two
		hello
		three
		
	`"
}

test {
	name 'immutable effect, dependent effect in environment opposite combination'
	case {
		{one two three} ([root Function] msg {[root ``] ([console] msg) ([console] hello)})
	}
	expect "
		one
		hello
		two
		hello
		three
		hello
		
	`"
}

test {
	name 'single effect used multiple times'
	case {
		{void void void} ([console] hello)
	}
	expect "
		hello
		
	`"
}

test {
	name 'effects in enviroment call with indirection'
	case {
		[root Function] msg {
			{lol lol} ([root Function] void {[console] msg})
		} hello
	}
	expect "
		hello
		hello
		
	`"
}

test {
	name 'function alias with do'
	case {
		[root Function] print {
			[root ``] (print hello) (print world)
		} ([root Function] message {
			[console] message
		})
	}
	expect "
		hello
		world
		
	`"
}

test {
	name 'print inside function using arg'
	case {
		[root Function] arg {
			[console] arg
		} hello
	}
	expect "
		hello`n
	`"
}

test {
	name 'do case'
	case {
		[root ``] ([console] hello) ([console] world)
	}
	expect "
		hello
		world
		
	`"
}

test {
	name 'nested do cases'
	case {
		[root ``] (
			[root ``] (
				[root ``] (
					[root ``] ([console] hello) ([console] world)
				) ([console] world)
			) ([console] world)
		) ([console] world)
	}
	expect "
		hello
		world
		world
		world
		world
		
	`"
}

test {
	name 'nested effects with indirection'
	case {
		[root Function] message {
			[root Function] void {
				[console] message
			} void
		} hello
	}
	expect "
		hello
		
	`"
}

test {
	name 'nested effects with indirection print last'
	case {
		[console] ([root Function] message {
			[root Function] void {
				message
			} void
		} hello)
	}
	expect "
		hello
		
	`"
}

test {
	name 'nested function arguments'
	case {
		([root Function] msg1 {
			([root Function] msg2 {
				[console] msg1 ([console] msg2)
			})
		}) hello world
	}
	expect "
		hello
		world
		
	`"
}

test {
	name 'nested function arguments with do'
	case {
		([root Function] msg1 {
			([root Function] msg2 {
				[root ``] ([console] msg1) ([console] msg2)
			})
		}) hello world
	}
	expect "
		hello
		world
		
	`"
}

test {
	name 'nested function arguments print indirection'
	case {
		([root Function] print {
			([root Function] msg1 {
				([root Function] msg2 {
					print msg1 (print msg2)
				})
			})
		}) [console] hello world
	}
	expect "
		hello
		world
		
	`"
}

test {
	name 'nested function arguments print indirection with do'
	case {
		([root Function] print {
			([root Function] msg1 {
				([root Function] msg2 {
					[root ``] (print msg1) (print msg2)
				})
			})
		}) [console] hello world
	}
	expect "
		hello
		world
		
	`"
}

test {
	name 'nested function arguments msg indirection'
	case {
		([root Function] identity {
			([root Function] msg1 {
				([root Function] msg2 {
					[console] (msg1 identity) ([console] (msg2 identity))
				})
			}) {hello} {world}
		}) ([root Function] msg {msg})
	}
	expect "
		hello
		world
		
	`"
}

test {
	name 'nested function arguments msg indirection with do'
	case {
		([root Function] identity {
			([root Function] msg1 {
				([root Function] msg2 {
					[root ``] ([console] (msg1 identity)) ([console] (msg2 identity))
				})
			}) {hello} {world}
		}) ([root Function] msg {msg})
	}
	expect "
		hello
		world
		
	`"
}