test {
	name 'effects in mutable init'
	case {
		[Mutable] ([console] hello)
	}
	expect "
		hello
		
	`"
}

test {
	name 'effects in mutable init, init function'
	case {
		[Mutable] ([console] 1) ([console] 2)
	}
	expect "
		1
		2
		
	`"
}

test {
	name 'create mutable and use value'
	case {
		[Mutable] hello ([root Function] set {[root Function] get {
			[console] (get void)
		}})
	}
	expect "
		hello
		
	`"
}

test {
	name 'create mutable and use value twice'
	case {
		[Mutable] hello ([root Function] set {[root Function] get {
			[console] (get void)
			([console] (get void))
		}})
	}
	expect "
		hello
		hello
		
	`"
}

test {
	name 'create mutable one and print static inverted'
	case {
		[Mutable] hello ([root Function] set {[root Function] get {
			[console] world
			([console] (get void))
		}})
	}
	expect "
		world
		hello
		
	`"
}

test {
	name 'create mutable one and print static'
	case {
		[Mutable] hello ([root Function] set {[root Function] get {
			[console] (get void)
			([console] world)
		}})
	}
	expect "
		hello
		world
		
	`"
}

test {
	name 'create mutable reset and then use'
	case {
		[Mutable] hello ([root Function] set {[root Function] get {
			[root ``] (set world) ([console] (get void))
		}})
	}
	expect "
		world
		
	`"
}

test {
	name 'create mutable use reset use'
	case {
		[Mutable] hello ([root Function] set {[root Function] get {
			[root ``] (set world) ([console] (get void))
			([root ``] (set !!) ([console] (get void)))
		}})
	}
	expect "
		world
		!!
		
	`"
}

test {
	name "wierd thing that didn't work once`"
	case {
		[Mutable] hello ([root Function] set {[root Function] get {
			[root ``] (
				[root ``] (lol lol) ([console] world)
				([root ``] (set !!) ([console] !!))
			) ([console] !!)
		}})
	}
	expect "
		world
		!!
		!!
		
	`"
}

test {
	name 'create mutable use reset use twice'
	case {
		[Mutable] hello ([root Function] set {[root Function] get {
			[root ``] (
				[root ``] (set world) ([console] (get void))
				([root ``] (set !!) ([console] (get void)))
			) ([console] (get void))
		}})
	}
	expect "
		world
		!!
		!!
		
	`"
}

test {
	name 'create two mutable and use simultaneously'
	case {
		[Mutable] [console] ([root Function] set {[root Function] get {
			[Mutable] hello ([root Function] set1 {[root Function] get1 {
				(get void) (get1 void)
			}})
		}})
	}
	expect "
		hello
		
	`"
}

test {
	name 'create two linearly dependant mutable instances'
	case {
		[Mutable] hello ([root Function] set {[root Function] get {
			[Mutable] (get void) ([root Function] set1 {[root Function] get1 {
				[console] (get1 void)
			}})
		}})
	}
	expect "
		hello
		
	`"
}

test {
	name 'two concurrent mutable instances'
	case {
		[Mutable] hello ([root Function] set1 {[root Function] get1 {
			[Mutable] world ([root Function] set2 {[root Function] get2 {
				([console] (get1 void)) ([console] (get2 void))
			}})
		}})
	}
	expect "
		hello
		world
		
	`"
}

test {
	name 'two concurrent mutable instances, mutate one'
	case {
		[Mutable] hello ([root Function] set1 {[root Function] get1 {
			[Mutable] world ([root Function] set2 {[root Function] get2 {
				[root ``] (set2 hello) (([console] (get1 void)) ([console] (get2 void)))
			}})
		}})
	}
	expect "
		hello
		hello
		
	`"
}

test {
	name 'two concurrent mutable instances, mutate both'
	case {
		[Mutable] hello ([root Function] set1 {[root Function] get1 {
			[Mutable] world ([root Function] set2 {[root Function] get2 {
				[root ``] ((set2 hello) (set1 world)) (([console] (get1 void)) ([console] (get2 void)))
			}})
		}})
	}
	expect "
		world
		hello
		
	`"
}

test {
	name 'create mutable use reset use common indirection'
	case {
		[Mutable] hello ([root Function] set {[root Function] get {
			[root Function] print {
				[root ``] (set world) (print void)
				([root ``] (set !!) (print void))
			} ([root Function] void {
				[console] (get void)
			})
		}})
	}
	expect "
		world
		!!
		
	`"
}

test {
	name 'mutation common initializer'
	case {
		[root Function] createMutable {
			[console] (createMutable void get)
		} ([root Function] void {
			[Mutable] hello ([root Function] mSet {[root Function] mGet {
				[root Function] env {
					[root Scope] ([compare] env get {mGet void} {
						[root Scope] ([compare] env set {
							mSet
						} {mGet void env})
					})
				}
			}})
		})
	}
	expect "
		hello
		
	`"
}

test {
	name 'mutation common initializer use twice'
	case {
		[root Function] createMutable {
			[root Function] a {
				[root Function] b {
					[root ``] ([console] (a get)) ([console] (b get))
				} (createMutable void)
			} (createMutable void)		} ([root Function] void {
			[Mutable] hello ([root Function] mSet {[root Function] mGet {
				[root Function] env {
					[root Scope] ([compare] env get {mGet void} {
						[root Scope] ([compare] env set {
							mSet
						} {mGet void env})
					})
				}
			}})
		})
	}
	expect "
		hello
		hello
		
	`"
}

test {
	name 'mutation common initializer use twice set once'
	case {
		[root Function] createMutable {
			[root Function] a {
				[root Function] b {
					[root ``] (a set world) ([root ``] ([console] (a get)) ([console] (b get)))
				} (createMutable void)
			} (createMutable void)
		} ([root Function] void {
			[Mutable] hello ([root Function] mSet {[root Function] mGet {
				[root Function] env {
					[root Scope] ([compare] env get {mGet void} {
						[root Scope] ([compare] env set {
							mSet
						} {mGet void env})
					})
				}
			}})
		})
	}
	expect "
		world
		hello
		
	`"
}

test {
	name 'mutation common initializer use twice set once reversed'
	case {
		[root Function] createMutable {
			[root Function] a {
				[root Function] b {
					[root ``] (b set world) ([root ``] ([console] (a get)) ([console] (b get)))
				} (createMutable void)
			} (createMutable void)
		} ([root Function] void {
			[Mutable] hello ([root Function] mSet {[root Function] mGet {
				[root Function] env {
					[root Scope] ([compare] env get {mGet void} {
						[root Scope] ([compare] env set {
							mSet
						} {mGet void env})
					})
				}
			}})
		})
	}
	expect "
		hello
		world
		
	`"
}

test {
	name 'mutation behind abstraction'
	case {
		[root Function] createMutable {
			[root Function] mut {
				[console] (mut get)
			} (createMutable hello)
		} ([root Function] init {
			[Mutable] init ([root Function] mSet {[root Function] mGet {
				[root Function] env {
					[root Scope] ([compare] env get {mGet void} {
						[root Scope] ([compare] env set {
							mSet
						} {mGet void env})
					})
				}
			}})
		})
	}
	expect "
		hello
		
	`"
}

test {
	name 'mutable behind function'
	case {
		[root Function] create {
			create ([root Function] set {
				[root Function] get {
					[console] (get void)
				}
			})
		} ([Mutable] hello)
	}
	expect "
		hello
		
	`"
}

test {
	name 'multiple behind function call'
	case {
		[root Function] create {
			create void ([root Function] set {
				[root Function] get {
					[console] (get void)
				}
			})
		} ([root Function] void {[Mutable] hello})
	}
	expect "
		hello
		
	`"
}

test {
	name 'multiple mutable behind function'
	case {
		[root Function] create {
			create void ([root Function] set {
				[root Function] get {
					create void ([root Function] set2 {
						[root Function] get2 {
							[root ``] ([console] (get void)) ([console] (get2 void))
						}
					})
				}
			})
		} ([root Function] void {[Mutable] hello})
	}
	expect "
		hello
		hello
		
	`"
}

test {
	name 'duplicated instance set one'
	case {
		[root Function] create {
			create ([root Function] set {
				[root Function] get {
					create ([root Function] set2 {
						[root Function] get2 {
							[root ``] (set2 world) ([root ``] ([console] (get void)) ([console] (get2 void)))
						}
					})
				}
			})
		} ([Mutable] hello)
	}
	expect "
		world
		world
		
	`"
}

test {
	name 'mutible mutable behind function set one behind function'
	case {
		[root Function] create {
			create void ([root Function] set {
				[root Function] get {
					create void ([root Function] set2 {
						[root Function] get2 {
							[root ``] (set2 world) ([root ``] ([console] (get void)) ([console] (get2 void)))
						}
					})
				}
			})
		} ([root Function] void {[Mutable] hello})
	}
	expect "
		hello
		world
		
	`"
}

test {
	name 'multiple mutable behind function set one reversed'
	case {
		[root Function] create {
			create void ([root Function] set {
				[root Function] get {
					create void ([root Function] set2 {
						[root Function] get2 {
							[root ``] (set world) ([root ``] ([console] (get void)) ([console] (get2 void)))
						}
					})
				}
			})
		} ([root Function] void {[Mutable] hello})
	}
	expect "
		world
		hello
		
	`"
}

test {
	name 'multiple mutable behind function set one both'
	case {
		[root Function] create {
			create void ([root Function] set {
				[root Function] get {
					create void ([root Function] set2 {
						[root Function] get2 {
							[root ``] (set world)
								([root ``] (set2 yeah) (
									([root ``] ([console] (get void)) ([console] (get2 void)))))
						}
					})
				}
			})
		} ([root Function] void {[Mutable] hello})
	}
	expect "
		world
		yeah
		
	`"
}

test {
	name 'mutation behind abstraction with set'
	case {
		[root Function] createMutable {
			[root Function] mut {
				[root ``] (mut set world) ([console] (mut get))
			} (createMutable hello)
		} ([root Function] init {
			[Mutable] init ([root Function] mSet {[root Function] mGet {
				[root Function] env {
					[root Scope] ([compare] env get {mGet void} {
						[root Scope] ([compare] env set {
							mSet
						} {mGet void env})
					})
				}
			}})
		})
	}
	expect "
		world
		
	`"
}

test {
	name 'mutation behind abstraction with set use two times'
	case {
		[root Function] createMutable {
			[root Function] mut {
				[root ``] ([console] (mut get)) ([root ``] (mut set world) ([console] (mut get)))
			} (createMutable hello)
		} ([root Function] init {
			[Mutable] init ([root Function] mSet {[root Function] mGet {
				[root Function] env {
					[root Scope] ([compare] env get {mGet void} {
						[root Scope] ([compare] env set {
							mSet
						} {mGet void env})
					})
				}
			}})
		})
	}
	expect "
		hello
		world
		
	`"
}

test {
	name 'mutable instance behind mutable'
	case {
		[Mutable] [Mutable] ([root Function] set {[root Function] get {
			get void hello ([root Function] set1 {[root Function] get1 {
				[console] (get1 void)
			}})
		}})
	}
	expect "
		hello
		
	`"
}

test {
	name 'mutable instance behind mutable tripple'
	case {
		[Mutable] [Mutable] ([root Function] set {[root Function] get {
			get void [Mutable] ([root Function] set1 {[root Function] get1 {
				get1 void hello ([root Function] set2 {[root Function] get2 {
					[console] (get2 void)
				}})
			}})
		}})
	}
	expect "
		hello
		
	`"
}

test {
	name 'mutation common initializer use twice set once reversed with mutable behind other mutable'
	case {
		[Mutable] [Mutable] ([root Function] setMutable {[root Function] getMutable {
			[root Function] createMutable {
				[root Function] a {
					[root Function] b {
						[root ``] (b set world) ([root ``] ([console] (a get)) ([console] (b get)))
					} (createMutable void)
				} (createMutable void)
			} ([root Function] void {
				getMutable void hello ([root Function] mSet {[root Function] mGet {
					[root Function] env {
						[root Scope] ([compare] env get {mGet void} {
							[root Scope] ([compare] env set {
								mSet
							} {mGet void env})
						})
					}
				}})
			})
		}})
	}
	expect "
		hello
		world
		
	`"
}