test {
	name 'basic identity'
	case {
		{
			[console] hello
		} [root Procedure]
	}
	expect "
		hello
		
	`"
}

test {
	name 'basic identity return ident'
	case {
		[console] (([root Function] param {
			param
		}) stuff)
	}
	expect "
		stuff
		
	`"
}

test {
	name 'basic identity nested preserve identifier'
	case {
		[console] ({
			{
				{
					{
						hello
					} [root Procedure]
				} [root Procedure]
			} [root Procedure]
		} [root Procedure])
	}
	expect "
		hello
		
	`"
}

test {
	name 'basic identity nested'
	case {
		{
			{
				{
					{
						[console] hello
					} [root Procedure]
				} [root Procedure]
			} [root Procedure]
		} [root Procedure]
	}
	expect "
		hello
		
	`"
}

test {
	name 'basic identity nested with do'
	case {
		{
			[root ``] ([console] hello) ({
				{
					{
						[console] world
					} [root Procedure]
				} [root Procedure]
			} [root Procedure])
		} [root Procedure]
	}
	expect "
		hello
		world
		
	`"
}

test {
	name 'indirect environment single'
	case {
		([root Function] wrap {
			{
				[console] hello
			} ([root Function] env {
				wrap {env} void
			})
		}) ([root Function] env {[root Function] void {env ([root Function] ident {ident})}})
	}
	expect "
		hello
		
	`"
}

test {
	name 'indirect environment twice nested'
	case {
		([root Function] wrap {
			{
				{
					[console] hello
				} ([root Function] env {
					wrap {env} void
				})
			} ([root Function] env {
				wrap {env} void
			})
		}) ([root Function] env {[root Function] void {env ([root Function] ident {ident})}})
	}
	expect "
		hello
		
	`"
}

test {
	name 'indirect environment thrice nested'
	case {
		([root Function] wrap {
			{
				{
					{
						[console] hello
					} ([root Function] env {
						wrap {env} void
					})
				} ([root Function] env {
					wrap {env} void
				})
			} ([root Function] env {
				wrap {env} void
			})
		}) ([root Function] env {[root Function] void {env ([root Function] ident {ident})}})
	}
	expect "
		hello
		
	`"
}

test {
	name 'indirect environment quad nested'
	case {
		([root Function] wrap {
			{
				{
					{
						{
							[console] hello
						} ([root Function] env {
							wrap {env} void
						})
					} ([root Function] env {
						wrap {env} void
					})
				} ([root Function] env {
					wrap {env} void
				})
			} ([root Function] env {
				wrap {env} void
			})
		}) ([root Function] env {[root Function] void {env ([root Function] ident {ident})}})
	}
	expect "
		hello
		
	`"
}