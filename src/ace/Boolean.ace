local cmp = unsafe identifier compare

local check = Function bool, callback, {
	bool callback {} Function x, {*x}
}

Function value, arg, {
	;; run cb if true
	check (cmp *arg ?) {
		Function cb, {
			value cb {} Function x, {*x}
		}
	}
	
	;; run cb if false
	check (cmp *arg !?) {
		Function cb, {
			value {} cb Function x, {*x}
		}
	}
	
	;; invert
	check (cmp *arg `!`) {
		value false true
	}
	
	;; xor
	check (cmp *arg !) {
		Funciton v2, {
			value {!v2} {v2} ()
		}
	}
	
	;; and
	check (cmp *arg &) {
		Function v2, {
			value v2 false
		}
	}
	
	;; or
	check (cmp *arg |) {
		Function v2, {
			value true v2
		}
	}
	
	;; not equal
	check (cmp *arg !:) {
		Function v2, {
			value {!v2} {v2} ()
		}
	}
	
	;; equal
	check (cmp *arg :) {
		Function v2, {
			value {v2} {!v2} ()
		}
	}
}