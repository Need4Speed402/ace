.cmp = unsafe identifier compare

.check = Scope bool, callback, {
	Scope (bool callback {})
}

Scope value, arg, {
	.call = Scope a, b, cb, {
		Scope (value a b cb)
		
		` .` = Scope arg, {
			check (cmp *arg ?) {
				call b a
			}
			
			check (cmp *arg !?) {
				call a b
			}
		}
	}
	
	;; run cb if true
	check (cmp *arg ?) {
		call Scope x, {x} ()
	}
	
	;; run cb if false
	check (cmp *arg !?) {
		call () Scope x, {x}
	}
	
	;; invert
	check (cmp *arg !`) {
		value false true
	}
	
	;; xor
	check (cmp *arg !) Scope {}, v2, {
		Scope (value {!v2} {v2})
	}
	
	;; and
	check (cmp *arg &) Scope {}, v2, {
		value v2 false
	}
	
	;; or
	check (cmp *arg |) Scope {}, v2, {
		value true v2
	}
	
	;; not equal
	check (cmp *arg !:) Scope {}, v2, {
		Scope (value {!v2} {v2})
	}
	
	;; equal
	check (cmp *arg :) Scope {}, v2, {
		Scope (value {v2} {!v2})
	}
}