;;" 
  " In many programming languages, the use of parenthesis '()' were
  " only really used for specifiying to the compiler exactly in which order
  " you wanted your code to run, this is of course based off of western
  " mathimatical notation.
  " 
  " In ace, the use of parenthesis signify a scope. Scopes are no more
  " complicated then imediately invoked functions where they can support
  " multi expression procedures, and its own variable scope.
  " 
  " Note that a lot of variable names are prefixed with '_'.
  " That is because by nature of the tools natively provided by the compiler
  " it is possible that an identifier not actually resolve as that identifier.
  " For example, the name 'value' may resolve as the identifier 'somethingelse'.
  " To avoid confusion for when this distinction may be possible, a '_' is
  " prefixed.
"`"

(Function Scope) { Function _assign {
	Function _compare {
		;;unsafe console (_compare hello hello {true} {false})
		Function _scope {
			_scope (Function _context {
				(_compare _context ``) {
					Function _next {Function _current {
						(_compare _current `) {
							_scope (Function _ctx {_ctx}) _next
						} {(_compare _current =) {
							_scope _current _next
						} {
							_assign {} _current
						}}
					}}
				} {(_compare _context `) {
					Function _null {
						_null _null
					} (Function _null {_assign ` (Function void {
						_null _null
					})})
				} {
					_context
				}}
			})
		} (Function _handler {Function _body {
			_body (Function _context {
				_assign _context (Function _parentcontext {
					Function _setctx {
						(_compare _setctx .`) {
							Function _setctx_2 {
								(_compare _setctx_2 =) {
									Function _value {
										(_assign =) (Function _setctx_3 {
											_compare _setctx_3 _context {
												_assign _context _value
											} {
												_assign {} _setctx_3
											}
										})
									}
								} {
									_parentcontext _setctx
								}
							}
						} {(_compare _setctx `,) {
							Function _body_2 { Function _parentContext { Function _argument {
								_body_2 (Function _ctx {
									(_compare _context _ctx) {
										_assign _ctx (Function _argcontext {
											(_compare _argcontext *`) {
												_argument
											} {
												_argument _argcontext
											}
										})
									} {
										_parentContext _ctx
									}
								})
							}}}
						} {
							_parentcontext _setctx
						}}
					}
				} (_handler _context))
			})
		}})
	} (Function _first {Function _second {
		Function true {Function false {
			Scope (unsafe compare _first _second true false)
		}}
	}})
} (unsafe assign) } (unsafe root Scope)