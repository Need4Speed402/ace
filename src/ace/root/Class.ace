;;" 
  " This module implements classes in ACE. The purpose of a class is
  " to encapsulate state and behavior. Normally you would want to create
  " a class to create a new type within your code, a type being a individually
  " identifiable value within the application.
"`"

.cmp : unsafe compare

.Mutable : std boot Mutable
.Recursive : std boot Recursive
.Resolver : std boot Resolver
.Function : Scope

.Procedure : unsafe root Procedure

.check : Function bool, callback, {
	Scope (bool callback {})
}

.both : Function bool, cb1, cb2, {
	Scope (bool cb1 cb2)
}

.vTrue : Function a, b, {*a}
.vFalse : Function a, b, {*b}

.createNode : Function next, ident, handler, ctx, {
	check (cmp root *ctx) { vFalse }
	check (cmp next *ctx) {*next}
	
	check (cmp handler *ctx) Function _, candidate, {
		check (unsafe compare *ident *candidate) {
			handler
		}
	}
}

.createID : (
	.root : Recursive ctx, {
		check (cmp root *ctx) { vTrue }
		check (cmp next *ctx) { recurse }
		check (cmp value *ctx) { vFalse }
	}
	
	.current : Mutable root
	
	.create : Function next, value, ctx, {
		check (cmp root *ctx) { vFalse }
		check (cmp next *ctx) { *next }
		check (cmp value *ctx) { *value }
	}
	
	Function _, {
		current : Recursive current, {
			both (current root) {
				create *current vTrue
			} {
				both (current value) {
					create (recurse (current next)) vFalse
				} {
					create (current next) vTrue
				}
			}
		} *current
		
		*current
	}
)

.compareID : Recursive v1, v2, {(
	.and : Function v1, v2, {v1 v2 vFalse}
	.xor : Function v1, v2, {v1 (v2 vFalse vTrue) v2}
	
	both (and (v1 root) (v2 root)) {
		vTrue
	} {
		both (xor (v1 value) (v2 value)) {
			vFalse
		} {
			recurse (v1 next) (v2 next)
		}
	}
)}

Function Constructor, {(
	.id : createID()
	
	;;" 
	  " make will call the constructor and create a new instance of this class
	"`"
	.make : Function argument, {(
		check (cmp classID *argument) { id }
		
		.default : Mutable ()
		.instance : Mutable ()
		
		.node : Mutable Function ctx, {
			check (cmp root *ctx) { vTrue }
			check (cmp handler *ctx) { *default }
		}
		
		default : (
			.default : Mutable Constructor Resolver Function ctx, {(
				check (cmp . *ctx) {
					argument
				}
				
				check (cmp this *ctx) {
					Function ident, {
						;;"
						  " when the class has instantiated, it will effectively become
						  " immutable and no further methods can be attached.
						  " 
						  " So, just send back the immutable instance object if that exists
						  " otherwise, it will try to insert it into the node list
						"`"
						Scope (
							*instance *ident
							
							Recursive current, {
								both (current root) {
									Function _, handler, {
										current : createNode Mutable *(*current) *ident *handler
									}
								} {
									current handler *ident
									recurse (current next)
								}
							} node
						)
					}
				}
				
				ctx
			)}
			
			Function ident, _, {(
				check (cmp == *ident) Function _, Constructor, {
					compareID id Constructor classID true false
				}
				
				*default *ident
			)}
		)
		
		instance : Function ident, {
			Recursive current, {
				current handler *ident
				recurse (current next)
			} node
		}
		
		Scope ident, {
			Scope (*instance *ident)
		}
	)}
	
	make
)}