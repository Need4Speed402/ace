>bitwise = {{{
	>fn = .
	
	>first = Dynamic false
	>second = Dynamic false
	>strip = Dynamic false
	>stripActive = Dynamic true
	
	>callfn = {
		fn Object {
			>first = *first
			>second = *second
			
			:this first {first}
			:this second {second}
		}
	}
	
	>loop = {{
		>end = ..empty & .empty
		
		end ? {
			strip = callfn()
			
			{. (strip) ()}
		}
		
		end !? {
			first = (..first; first)
			second = (.first; second)
			>value = callfn()
			>next = loop ..rest .rest
			
			stripActive = stripActive & (value == strip)
			
			stripActive ? {
				{. (value) ()}
			}
			
			{. (value) (next)}
		}
	}}
	
	Integer Iterator (loop ... ..)
}}}

>compare = {{
	>first = Dynamic false
	>second = Dynamic false

	>loop = {{
		>a = ..rest
		>b = .rest
		
		first = (..first; first)
		second = (.first; second)
		
		(a empty) & (b empty) ?? {
			!first & second ? {1}
			first & !second ? {-1}
		} ~ {
			>first = *first
			>second = *second
			
			loop a b

			!first & second ? {-1}
			first & !second ? {1}
		}
	}}
	
	loop .. .
	0
}}

Class {
	:this bits {:}
	
	:this `+` {
		:this
	}
	
	:this `-` {
		0 - :this
	}
	
	:this `~` {
		Integer (:map {!.} clone)
	}
	
	:this ! {{bitwise : .bits {.first ! .second}}}
	:this | {{bitwise : .bits {.first | .second}}}
	:this & {{bitwise : .bits {.first & .second}}}
	
	:this odd {:first}
	:this even { !(:this odd) }
	:this negative { :last }
	:this positive { -:this bits last }
	:this zero {:first == false & :rest empty}
	:this abs {:last ? {-:this}; :this}
	
	:this << {{
		>i = Dynamic .
		
		>loop = {
			i == 0 ?? {
				.
			} ~ {
				i =- 1
				>next = loop .
				
				{. false next}
			}
		}
		
		Integer Iterator (loop :backing)
	}}
	
	:this >> {{
		>i = Dynamic .
		
		>loop = {
			i == 0 ?? {
				.
			} ~ {
				i =- 1
				loop .{{.}}
			}
		}
		
		Integer Iterator (loop :backing; {. false ()})
	}}
	
	:this + {{
		>carry = Dynamic false
		
		bitwise : .bits {
			>a = .first ! .second
			>val = a ! *carry
			carry = *carry & a | (.first & .second)
			
			val
		}
	}}
	
	:this - {{
		>aa = Dynamic true
		>carry = Dynamic false
				
		bitwise : .bits {
			>second = .second == *aa
			aa = !.second & *aa
			
			>a = .first ! second
			>val = a ! *carry
			carry = *carry & a | (.first & second)
			
			val
		}
	}}
	
	:this * {{
		;; calculates the product of x and y
		>x = Dynamic :this
		>y = Dynamic .
		
		y negative ? {
			x = -x
			y = -y
		}
		
		>val = Dynamic 0
		>index = Dynamic 0
		
		y bits for {
			. ? {
				val =+ x << index
			}
			
			index =+ 1
		}
		
		*val
	}}
	
	:this /% {{
		>x = Dynamic :this
		>y = Dynamic .
		
		>sign = x negative ! y negative
		
		x = x abs
		y = y abs
		
		>index = Dynamic (x bits length)
		>quotient = Dynamic 0
		
		>while = {{
			>loop = {
				...() ? {
					.. ()
					loop ()
				}
			}
			
			loop ()
		}}
		
		while {index > 0} {
			index =- 1
			
			>uu = y << index
			uu <= x ? {
				x =- uu
				quotient = quotient | (1 << index)
			}
		}
		
		sign ? {
			[-quotient; *x]
		}
		
		[*quotient; *x]
	}}
	
	:this // {{ (:this /% .) 0 }}
	:this % {{ (:this /% .) 1 }}
	
	:this square {:this * :this}
	:this cube {:this * :this * :this}
	
	:this ^ {{
		. == 0 ? {1}
		. == 1 ? {:this}
		
		. even ?? {
			:this square ^ (. >> 1)
		} ~ {
			:this * :this square ^ (. >> 1)
		}
	}}
	
	:this < {{
		compare : .bits == -1
	}}
	
	:this > {{
		compare : .bits == 1
	}}
	
	:this <= {{
		 compare : .bits != 1
	}}
	
	:this >= {{
		compare : .bits != -1
	}}
	
	:this == {{
		compare : .bits zero
	}}
	
	:this != {{
		!(compare : .bits zero)
	}}
	
	:this times {
		0 to :this
	}
	
	:this to {{
		>until = .
		
		>create = {
			>index = .
			
			index == until !? {
				{. index (create (index + 1))}
			}
		}
		
		Iterator (create :this)
	}}
	
	:this toString {
		:this == 0 ? {'0'}
		
		>chars = '0123456789'
		>value = :this abs
		
		>loop = {
			. != 0 ? {
				>[div; rem] = . /% 10
				>rest = loop div
				
				{. (chars rem) (rest)}
			}
		}
		
		>str = String (Iterator (loop :this) reverse)
		
		:this negative ? {'-' + str}
		str
	}
}