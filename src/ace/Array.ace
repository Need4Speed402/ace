>Memory = package unsafe Memory

Class {
	>length = :length
	
	>get = (
		: ~= Iterator ? {
			>backing = Memory length
			
			: for {
				backing set .index .
			}
			
			backing get
		}
		
		:get
	)
	
	:this first {
		get 0
	}
	
	:this second {
		get 1
	}
	
	:this third {
		get 2
	}
	
	:this last {
		get (value length - 1)
	}
	
	:this length {
		length	
	}
	
	:this `>` {
		:this map {>.}
	}
	
	:this = {{
		:this for {
			. = .. .index
		}
	}}
	
	:this map {{
		>cb = .
		>mem = Memory length
		
		length times for {
			mem set . (cb (get .))
		}
		
		Array Object {
			:this length {length}
			mem
		}
	}}
	
	:this + {{
		>mem = Memory (length + .length)
		
		length times for {
			mem set .index (get .index)
		}
		
		.length times for {
			mem set (.index + length) (.. .index)
		}
		
		Array Object {
			:this length {length}
			mem
		}
	}}
	
	:this for {{
		>cb = .
		>index = Dynamic 0
		
		
		>loop = {
			index != length ? {
				cb (Object {
					:this index {index}
					{get index .}
				})
				
				index =+ 1
				loop ()
			}
		}
		
		loop ()
	}}
	
	:this (Integer) {
		get .
	}
	
	(
		>walk = {
			>index = .
			
			index == length !? {
				{. (get index) (walk (index + 1))}
			}
		}
		
		Iterator (walk 0)
	)
}