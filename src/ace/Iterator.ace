null \= Object {
	:this first {{}}
	:this rest {null}
	:this null {true}
}

Class {
	:this @ {{
		cb \= .
		loop \= {
			.null ?! {
				cb ..first
				loop ..rest
			}
		}
		
		loop :
	}}
	
	:this backing {:}
	
	:this first {:first}
	:this rest {Iterator (:rest)}
	:this empty {:null}
	
	:this / {{
		zip \= {{
			..empty & .empty ? {..empty}
			
			Object {
				:this first {[....first; ...first]}
				:this rest {zip ....rest ...rest}
			}
		}}
		
		Iterator (zip :this .)
	}}
	
	:this + {{
		add \= .
		walk \= {
			current \= .
			current empty ? {add}
			
			Object {
				:this first {current first}
				:this null {false}
				:this next {walk (current next)}
			}
		}
		
		Iterator (walk :this)
	}}
	
	:this map {{
		fn \= .
		
		create \= {
			.null ? {..}
			
			value \= fn .first
			next \= create .rest
			
			Object {
				:this first {value}
				:this rest {next}
				:this null {false}
			}
		}
		
		Iterator (create :) 
	}}
	
	:this length {
		loop \= {
			.null ? {0}
			
			1 + (loop .rest)
		}
		
		loop :
	}
}