$null = Object {
	:this first {{}}
	:this rest {null}
	:this null {true}
}

Class {
	:this for {{
		$cb = .
		$loop = {
			.null !? {
				cb .first
				loop .rest
			}
		}
		
		loop :
	}}
	
	:this backing {:}
	
	:this first {:first}
	:this rest {Iterator :rest}
	:this empty {:null}
	
	:this zip {{
		$zip = {{
			..empty & .empty ? {.empty}
			
			Object {
				:this first {[....first; ...first]}
				:this rest {zip ....rest ...rest}
			}
		}}
		
		Iterator (zip :this .)
	}}
	
	:this + {{
		$add = .backing
		$walk = {
			.null ? {add}
			
			Object {
				:this first {.first}
				:this null {false}
				:this rest {walk .rest}
			}
		}
		
		Iterator (walk :)
	}}
	
	:this map {{
		$fn = .
		
		$walk = {
			.null ? {.}
			
			Object {
				:this first {fn ..first}
				:this rest {walk ..rest}
				:this null {false}
			}
		}
		
		Iterator (walk :) 
	}}
	
	:this length {
		$loop = {
			.null ? {0}
			
			1 + (loop .rest)
		}
		
		loop :
	}
	
	:this clone {
		$walk = {
			.null ? {.}
			$first = .first
			$rest = walk .rest
			
			Object {
				:this first {first}
				:this rest {rest}
				:this null {false}
			}
		}
		
		Iterator (walk :)
	}
}