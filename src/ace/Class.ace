.Identifier = unsafe ID
.cmp = unsafe identifier compare
.isIdentifier = unsafe identifier discover

.Function = unsafe Function

.createNode = define, next, (
	.nextRef = .next
	
	cxt, (
		cmp *cxt defined {
			t, f, t
		}
		
		cmp *cxt next {
			ctx, (
				cmp *ctx = {value, (nextRef = value)}
				(next) *ctx
			)
		}
		
		cmp *cxt cmp {
			value, cb, (
				(isIdentifier) define {
					cmp *define *value cb
				} {
					*define :: *value ? cb
				}
			)
		}
	)
)

;;.classcid = Identifier ()

.Class = ctx, (
	.id = Identifier ()
	.instance = {()}
	
	.constructor = callback, (
		;;cmp *ctx :: {class~}
		
		.default = (
			callback ctx, (
				(
					
				) ctx
			)
		)
	)
	
	constructor
)

Class